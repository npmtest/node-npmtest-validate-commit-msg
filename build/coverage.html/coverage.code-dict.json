{"/home/travis/build/npmtest/node-npmtest-validate-commit-msg/test.js":"/* istanbul instrument in package npmtest_validate_commit_msg */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-validate-commit-msg/lib.npmtest_validate_commit_msg.js":"/* istanbul instrument in package npmtest_validate_commit_msg */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_validate_commit_msg = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_validate_commit_msg = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-validate-commit-msg/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-validate-commit-msg && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_validate_commit_msg */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_validate_commit_msg\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_validate_commit_msg.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_validate_commit_msg.rollup.js'] =\n            local.assetsDict['/assets.npmtest_validate_commit_msg.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_validate_commit_msg.__dirname + '/lib.npmtest_validate_commit_msg.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-validate-commit-msg/node_modules/validate-commit-msg/index.js":"'use strict';\n\nmodule.exports = require('./lib/validateMessage').validateMessage;\n","/home/travis/build/npmtest/node-npmtest-validate-commit-msg/node_modules/validate-commit-msg/lib/validateMessage.js":"'use strict';\n\nvar util = require('util');\nvar semverRegex = require('semver-regex');\nvar getConfig = require('./config').getConfig;\n\nvar config = getConfig();\nvar MAX_LENGTH = config.maxSubjectLength || 100;\nvar IGNORED = new RegExp(util.format('(^WIP)|(^%s$)', semverRegex().source));\n\n// fixup! and squash! are part of Git, commits tagged with them are not intended to be merged, cf. https://git-scm.com/docs/git-commit\nvar PATTERN = /^((fixup! |squash! )?(\\w+)(?:\\(([^\\)\\s]+)\\))?: (.+))(?:\\n|$)/;\nvar MERGE_COMMIT_PATTERN = /^Merge /;\n\nvar error = function() {\n  // gitx does not display it\n  // http://gitx.lighthouseapp.com/projects/17830/tickets/294-feature-display-hook-error-message-when-hook-fails\n  // https://groups.google.com/group/gitx/browse_thread/thread/a03bcab60844b812\n  console[config.warnOnFail ? 'warn' : 'error']('INVALID COMMIT MSG: ' + util.format.apply(null, arguments));\n};\n\nexports.config = config;\n\nexports.validateMessage = function validateMessage(raw) {\n  var types = config.types = config.types || 'conventional-commit-types';\n\n  // resolve types from a module\n  if (typeof types === 'string' && types !== '*') {\n    types = Object.keys(require(types).types);\n  }\n\n  var messageWithBody = (raw || '').split('\\n').filter(function(str) {\n    return str.indexOf('#') !== 0;\n  }).join('\\n');\n\n  var message = messageWithBody.split('\\n').shift();\n\n  if (message === '') {\n    console.log('Aborting commit due to empty commit message.');\n    return false;\n  }\n\n  var isValid = true;\n\n  if (MERGE_COMMIT_PATTERN.test(message)) {\n    console.log('Merge commit detected.');\n    return true\n  }\n\n  if (IGNORED.test(message)) {\n    console.log('Commit message validation ignored.');\n    return true;\n  }\n\n  var match = PATTERN.exec(message);\n\n  if (!match) {\n    error('does not match \"<type>(<scope>): <subject>\" !');\n    isValid = false;\n  } else {\n    var firstLine = match[1];\n    var squashing = !!match[2];\n    var type = match[3];\n    var scope = match[4];\n    var subject = match[5];\n\n    var SUBJECT_PATTERN = new RegExp(config.subjectPattern || '.+');\n    var SUBJECT_PATTERN_ERROR_MSG = config.subjectPatternErrorMsg || 'subject does not match subject pattern!';\n\n    if (firstLine.length > MAX_LENGTH && !squashing) {\n      error('is longer than %d characters !', MAX_LENGTH);\n      isValid = false;\n    }\n\n    // If should auto fix type then do it here\n    if (config.autoFix) {\n      type = lowercase(type);\n    }\n\n    if (types !== '*' && types.indexOf(type) === -1) {\n      error('\"%s\" is not allowed type ! Valid types are: %s', type, types.join(', '));\n      isValid = false;\n    }\n\n    isValid = validateScope(isValid, scope);\n\n    if (config.autoFix) {\n      subject = lowercaseFirstLetter(subject);\n    }\n\n    if (!SUBJECT_PATTERN.exec(subject)) {\n      error(SUBJECT_PATTERN_ERROR_MSG);\n      isValid = false;\n    }\n  }\n\n  // Some more ideas, do want anything like this ?\n  // - Validate the rest of the message (body, footer, BREAKING CHANGE annotations)\n  // - auto add empty line after subject ?\n  // - auto remove empty () ?\n  // - auto correct typos in type ?\n  // - store incorrect messages, so that we can learn\n\n  isValid = isValid || config.warnOnFail;\n\n  if (isValid) { // exit early and skip messaging logics\n    return true;\n  }\n\n  var argInHelp = config.helpMessage && config.helpMessage.indexOf('%s') !== -1;\n\n  if (argInHelp) {\n    console.log(config.helpMessage, messageWithBody);\n  } else if (message) {\n    console.log(message);\n  }\n\n  if (!argInHelp && config.helpMessage) {\n    console.log(config.helpMessage);\n  }\n\n  return false;\n};\n\nfunction lowercase(string) {\n  return string.toLowerCase();\n}\n\nfunction lowercaseFirstLetter(string) {\n  return lowercase(string.charAt(0)) + string.slice(1);\n}\n\nfunction validateScope(isValid, scope) {\n  config.scope = config.scope || {};\n  var validateScopes = config.scope.validate || false;\n  var multipleScopesAllowed = config.scope.multiple || false;\n  var allowedScopes = config.scope.allowed || '*';\n  var scopeRequired = config.scope.required || false;\n  var scopes = scope ? scope.split(',') : [];\n\n  function validateIndividualScope(item) {\n    if (allowedScopes[0].trim() === '*') {\n      return;\n    }\n    if (allowedScopes.indexOf(item) === -1) {\n      error('\"%s\" is not an allowed scope ! Valid scope are: %s', item, allowedScopes.join(', '));\n      isValid = false;\n    }\n  }\n\n  if (validateScopes) {\n    if (scopeRequired && scopes.length === 0) {\n      error('a scope is required !');\n      isValid = false;\n    }\n    // If scope is not provided, we ignore the rest of the testing and do early\n    // return here.\n    if (scopes.length === 0) {\n      return isValid;\n    }\n    if (isValid && multipleScopesAllowed) {\n      scopes.forEach(validateIndividualScope);\n    }\n    if (isValid && !multipleScopesAllowed) {\n      if (scopes.length > 1) {\n        error('only one scope can be provided !');\n        isValid = false;\n      }\n      if (isValid) {\n        validateIndividualScope(scopes[0]);\n      }\n    }\n  }\n\n  return isValid;\n};\n","/home/travis/build/npmtest/node-npmtest-validate-commit-msg/node_modules/validate-commit-msg/lib/config.js":"'use strict';\n\nvar findup = require('findup');\nvar fs = require('fs');\nvar resolve = require('path').resolve;\n\nfunction getConfigObject(filename) {\n  try {\n    var rcFile = findup.sync(process.cwd(), filename);\n    return JSON.parse(fs.readFileSync(resolve(rcFile, filename)));\n  } catch (e) {\n    return null;\n  }\n}\n\nfunction getRcConfig() {\n  return getConfigObject('.vcmrc');\n}\n\nfunction getPackageConfig() {\n  var configObject = getConfigObject('package.json');\n  return configObject && configObject.config && configObject.config['validate-commit-msg'];\n}\n\nfunction getConfig() {\n  return getRcConfig() || getPackageConfig() || {};\n}\n\nmodule.exports = {\n  getConfig: getConfig,\n  getRcConfig: getRcConfig,\n  getPackageConfig: getPackageConfig,\n  getConfigObject: getConfigObject\n};\n","/home/travis/build/npmtest/node-npmtest-validate-commit-msg/node_modules/validate-commit-msg/lib/cli.js":"#!/usr/bin/env node\n\n/**\n * Git COMMIT-MSG hook for validating commit message\n * See https://docs.google.com/document/d/1rk04jEuGfk9kYzfqCuOlPTSJw3hEDZJTBN5E5f1SALo/edit\n *\n * Installation:\n * >> cd <angular-repo>\n * >> ln -s ../../validate-commit-msg.js .git/hooks/commit-msg\n */\n\n'use strict';\n\nvar fs = require('fs');\nvar validateMessage = require('../index');\nvar getGitFolder = require('./getGitFolder');\n\n// hacky start if not run by mocha :-D\n// istanbul ignore next\nif (process.argv.join('').indexOf('mocha') === -1) {\n  var commitMsgFileOrText = process.argv[2] || getGitFolder() + '/COMMIT_EDITMSG';\n\n  var bufferToString = function (buffer) {\n    return hasToString(buffer) && buffer.toString();\n  };\n\n  var hasToString = function (x) {\n    return x && typeof x.toString === 'function';\n  };\n\n  var validate = function (msg, isFile) {\n    if (!validateMessage(msg)) {\n      var incorrectLogFile = (\n        isFile\n        ? commitMsgFileOrText.replace('COMMIT_EDITMSG', 'logs/incorrect-commit-msgs')\n        : (getGitFolder() + '/logs/incorrect-commit-msgs')\n      );\n\n      fs.appendFile(incorrectLogFile, msg + '\\n', function appendFile() {\n        process.exit(1);\n      });\n    } else {\n      process.exit(0);\n    }\n  };\n\n  fs.readFile(commitMsgFileOrText, function readFile(err, buffer) {\n    if(err && err.code !== 'ENOENT') {\n      throw err;\n    }\n\n    var isFile = !err;\n    var msg = (\n      isFile\n      ? bufferToString(buffer)\n      : commitMsgFileOrText\n    );\n\n    validate(msg, isFile);\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-validate-commit-msg/node_modules/validate-commit-msg/lib/getGitFolder.js":"'use strict';\n\nvar fs = require('fs');\nvar path = require('path');\nvar findParentDir = require('find-parent-dir');\n\nmodule.exports = function getGitFolder() {\n  var dir = findParentDir.sync(process.cwd(), '.git');\n  if (!dir) throw new Error('Cannot find .git folder');\n\n  var gitDir = path.join(dir, '.git');\n  var stats = fs.lstatSync(gitDir);\n\n  if (!stats.isDirectory()) {\n    // Expect following format\n    // git: pathToGit\n    var pathToGit = fs\n      .readFileSync(gitDir, 'utf-8')\n      .split(':')[1]\n      .trim();\n    gitDir = path.join(dir, pathToGit);\n\n    if (!fs.existsSync(gitDir)) {\n      throw new Error('Cannot find file ' + pathToGit);\n    }\n  }\n\n  return gitDir;\n};\n"}